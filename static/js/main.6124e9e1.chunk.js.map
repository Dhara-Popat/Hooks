{"version":3,"sources":["components/ClassCounterOne.js","components/ComA.js","components/HookCounterTwo.js","components/ReducerHook.js","App.js","reportWebVitals.js","index.js"],"names":["Component","ComA","HookCounterTwo","reducer","state","action","ReducerHook","useReducer","count","dispatch","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEqCA,YCStBC,I,OCIAC,ICZTC,EAAU,SAACC,EAAOC,GACpB,OAAOA,GACH,IAAK,YACD,OAAOD,EAAQ,EACnB,IAAK,YACD,OAAOA,EAAQ,EACnB,IAAK,QACD,OARS,EASb,QACI,OAAOA,IAkBJE,MAdf,WAEI,MAA0BC,qBAAWJ,EAhBpB,GAgBjB,mBAAOK,EAAP,KAAcC,EAAd,KAEA,OACI,gCACI,2CAAcD,KACd,wBAAQE,QAAS,kBAAMD,EAAS,cAAhC,uBACA,wBAAQC,QAAS,kBAAMD,EAAS,cAAhC,uBACA,wBAAQC,QAAS,kBAAMD,EAAS,UAAhC,uBCMGE,MApBf,WACE,OACE,mCAUE,cAAC,EAAD,OCXSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6124e9e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class ClassCounterOne extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            count: 0,\r\n            name: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = `Clicked ${this.state.count} times`\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        document.title = `Clicked ${this.state.count} times`\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" value={this.state.name} />\r\n                <button onClick={() => this.setState({ count: this.state.count + 1 })}>\r\n                    You clicked {this.state.count} times\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClassCounterOne\r\n","import React from 'react'\r\nimport ComB from './ComB'\r\n\r\nfunction ComA() {\r\n    return (\r\n        <div>\r\n            <ComB />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComA\r\n","import React, { useState } from 'react'\r\n\r\nfunction HookCounterTwo() {\r\n    const initialCount = 0\r\n    const [count, setCount] = useState(initialCount)\r\n    return (\r\n        <div>\r\n            Count: {count}\r\n            <button onClick={() => setCount(initialCount)}>Reset</button>\r\n            <button onClick={() => setCount(count + 1)}>Increment</button>\r\n            <button onClick={() => setCount(count - 2)}>Decrement</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HookCounterTwo\r\n","import React, {useReducer} from 'react'\r\n\r\nconst initialState = 0\r\nconst reducer = (state, action) => {\r\n    switch(action){\r\n        case 'increment':\r\n            return state + 1\r\n        case 'decrement':\r\n            return state - 1\r\n        case 'reset':\r\n            return initialState\r\n        default: \r\n            return state  \r\n    }\r\n}\r\n\r\nfunction ReducerHook() {\r\n\r\n    const [count, dispatch] = useReducer(reducer, initialState)\r\n\r\n    return (\r\n        <div>\r\n            <div>Count - {count}</div>\r\n            <button onClick={() => dispatch('increment')}>Increment</button>\r\n            <button onClick={() => dispatch('decrement')}>Decrement</button>\r\n            <button onClick={() => dispatch('reset')}>Reset</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReducerHook\r\n","import React from 'react';\nimport './App.css';\nimport ClassCounterOne from './components/ClassCounterOne';\nimport ComA from './components/ComA';\nimport HookCounterone from './components/HookCounterone';\nimport HookCounterTwo from './components/HookCounterTwo';\nimport ReducerHook from './components/ReducerHook';\n\nexport const UserContext = React.createContext()\nexport const ChannelContext = React.createContext()\n\nfunction App() {\n  return (\n    <>\n      {/* <ClassCounterOne></ClassCounterOne> */}\n      {/* <HookCounterone></HookCounterone> */}\n      {/* <HookCounterTwo></HookCounterTwo> */}\n      {/* <UserContext.Provider value={'UserName'}> */}\n        {/* <ChannelContext value=\"new\">\n          <ComA />\n        </ChannelContext>\n      </UserContext.Provider> */}\n\n      <ReducerHook />\n\n      \n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}